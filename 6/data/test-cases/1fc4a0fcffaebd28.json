{
  "uid" : "1fc4a0fcffaebd28",
  "name" : "test_sign_in_new_user[chrome]",
  "fullName" : "test_src.Tests.test01_registration.test_TC01.TestReg01#test_sign_in_new_user",
  "historyId" : "2900daa5e7404e75ba5d4b792cd3548f",
  "time" : {
    "start" : 1629146847572,
    "stop" : 1629146854516,
    "duration" : 6944
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.TimeoutException: Message:",
  "statusTrace" : "self = <test_src.Tests.test01_registration.test_TC01.TestReg01 object at 0x7f4ab64c0700>\n\n    def test_sign_in_new_user(self):\n        try:\n            self.MainPage = MainPage(self.driver)\n            assert self.MainPage.is_reg_successful_displayed() is True\n            assert self.MainPage.reg_successful_text() == TestData.text_reg_successful\n            assert self.MainPage.is_reg_successful_accept_btn_displayed() is True\n            self.MainPage.click_reg_successful_accept_btn()\n            time.sleep(1)\n>           assert self.MainPage.is_username_displayed() == TestData.reg_test_valid[0]\n\ntest_src/Tests/test01_registration/test_TC01.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_src/Pages/MainPage.py:31: in is_username_displayed\n    return self.get_element_text(MainPgWebElements.username_btn)\ntest_src/Pages/base_commands.py:80: in get_element_text\n    element = WebDriverWait(self.driver, 5).until(EC.visibility_of_element_located(by_locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"2ff7ee9df5c8fb76c3f39028a6bfd527\")>\nmethod = <selenium.webdriver.support.expected_conditions.visibility_of_element_located object at 0x7f4ab5e15310>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.9.5/x64/lib/python3.9/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "init_driver",
    "time" : {
      "start" : 1629146836435,
      "stop" : 1629146842502,
      "duration" : 6067
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ {
    "name" : "init_driver::0",
    "time" : {
      "start" : 1629146854764,
      "stop" : 1629146854824,
      "duration" : 60
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('init_driver')"
  }, {
    "name" : "parentSuite",
    "value" : "test_src.Tests.test01_registration"
  }, {
    "name" : "suite",
    "value" : "test_TC01"
  }, {
    "name" : "subSuite",
    "value" : "TestReg01"
  }, {
    "name" : "host",
    "value" : "fv-az83-93"
  }, {
    "name" : "thread",
    "value" : "3732-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_src.Tests.test01_registration.test_TC01"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "init_driver",
    "value" : "'chrome'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "@pytest.mark.usefixtures('init_driver')" ]
  },
  "source" : "1fc4a0fcffaebd28.json",
  "parameterValues" : [ "'chrome'" ]
}